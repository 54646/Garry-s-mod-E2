@model models/props_phx/construct/metal_angle360.mdl
@name Holographic radar
@inputs E:wirelink
@inputs Active ScanPos:vector HoloOutput:vector ScanRange HoloScale
@outputs Entities:array
@persist ScanPos:vector Entities:array Range Scale
@persist BlackList:array
@trigger 



interval(500)

if (first()|dupefinished()){
    entity():setColor(vec(50,50,50))
    
    #ifdef holoAnim()
    hint("This E2 can't run on this server, you need to enable holo")
    #endif
}

#####START Manage wire inputs#####

if (->ScanRange){
    Range = ScanRange
}
else{
    Range = 2000
}
if (->HoloScale){
    Scale = HoloScale
}
else{
    Scale = 10
}


#####END Manage wire inputs#####
if (!Active&~Active){
    soundStop(0)
    #entity():soundPlay(1,0,"bail/aaah.mp3")
    entity():soundPlay(1,0,"common/warning.wav")
    E:egpClear()
    holoDeleteAll()
}
if (Active&~Active){
    entity():soundPlay(1,0,"tech/asgard_holo.wav")
    entity():soundPlay(0,0,"npc/scanner/combat_scan_loop2.wav")
    
    #holo for holo emitter
    holoCreate(0)
    holoPos(0,entity():toWorld(vec(0,0,50)))
    holoAng(0,entity():angles())
    holoParent(0,entity())
    holoAlpha(0,0)
    
    #holo for scanning
    holoCreate(1)
    holoPos(1,entity():toWorld(vec(0,0,50)))
    holoAlpha(1,0)
    
    if (->HoloOutput){
        holoPos(0,HoloOutput)
    }
    else{
        holoPos(0,entity():toWorld(vec(0,0,60)))
    }
    if (->ScanPos){
        holoPos(1,ScanPos)
    }
    else{
        holoPos(1,entity():pos())
    }
    
    HoloDest = holoEntity(0)
    HoloScan = holoEntity(1)
    
    findExcludeClass("gmod_*")
    findExcludeClass("weapon_*")
    findExcludeClass("shield_*")
    findExcludeClass("energy_*")
    findExcludeClass("cloak_*")
    findExcludeEntities(BlackList)
    findInSphere(HoloScan:pos(),Range)
    
    findSortByDistance(HoloScan:pos())
    
    Entities = findToArray()
    
    X = 1
    
    while (X < Entities:count() & perf()){
        Entity = Entities[X,entity]
    
        if (Entity:volume()>20000|Entity:isPlayer()){
            ID = Entity:id()+5#+5 (you can add 5 holo before it)
    
            #print(Entity:id())
            
            holoCreate(ID)
            holoModel(ID,Entity:model())
            holoMaterial(ID,Entity:getMaterial())
            holoScale(ID,vec(1,1,1)/Scale)
            
            LocalPos = HoloScan:toLocal(Entity:pos())/Scale
            LocalAng = HoloScan:toLocal(Entity:angles())
            
            WorldPos = HoloDest:toWorld(LocalPos)
            WorldAng = HoloDest:toWorld(LocalAng)
            
            holoAng(ID,WorldAng)
            holoPos(ID,WorldPos)
            
            
            holoParent(ID,HoloDest)
            
            ######## START EGP Texts ########
            EgpPrint = 0
            #ifdef stargateSystemType()
            if (Entity:stargateName()){
                EgpPrint = 1
                EgpName = Entity:stargateName()
            }
            if (Entity:stargateRingAddress()){
                EgpPrint = 1
                EgpName = "Rings: " + Entity:stargateRingAddress()
            }
            #endif
            if (Entity:isPlayer()){
                
                EgpPrint = 1
                EgpName = Entity:name()
            }
            if (EgpPrint){
                TrackerId = X
                NameId = X+Entities:count()
                      
                E:egp3DTracker(TrackerId,Entity:pos())
                
                E:egpText(NameId,EgpName,vec2(0,0))
                E:egpSize(NameId,15)
                E:egpColor(NameId,vec(170,170,255))
                
                E:egpParent(NameId,TrackerId)
                
                E:egpPos(TrackerId,WorldPos)
            }
            ######## END EGP Texts ########
        }
        else{
            BlackList[BlackList:count()+1,entity] = Entity
        }
        X += 1
    }
}

