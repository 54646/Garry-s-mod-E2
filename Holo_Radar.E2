@model models/Boba_Fett/props/orb.mdl
@name Holographic radar
@inputs E:wirelink
@inputs ScanPos:vector HoloOutput:vector ScanRange HoloScale Reset
@outputs Entities:array
@persist Output:vector ScanPos:vector Range Scale LastHolos:array Holos:array
@persist BlackList:array EgpPlayers:table HoloDest:entity HoloScan:entity
@trigger 


function number findInArray(R:array,N:number){
    for (I=1,R:count()){
        if (N == R[I,number]){
            return I
        }
    }
    return -1
}

interval(250)

if (first()|dupefinished()){
    E:egpClear()
    
    Holos = array()
    
    entity():setColor(vec(50,50,50))
    #holo for holo emitter
    holoCreate(0)
    holoPos(0,entity():toWorld(vec(0,0,50)))
    holoAng(0,entity():angles())
    holoParent(0,entity())
    holoAlpha(0,0)
    
    #holo for scanning
    holoCreate(1)
    #holoPos(1,findPlayerByName("alex"):pos())
    holoPos(1,entity():toWorld(vec(0,0,50)))
    holoAlpha(1,0)
    
    
    HoloDest = holoEntity(0)
    HoloScan = holoEntity(1)
    
    Scale = 5
    Range = 1000
    
    findByClass("player")
    findSortByDistance(HoloScan:pos())
    Players = findToArray()
    
    for (X=1,Players:count()){
        Player = Players[X,entity]
        #print(Players:count())
        if (Player:pos():distance(HoloScan:pos())<Range){
            EgpPlayers[Player:name(),number] = Player:id()
            ID = Player:id()
            Name = Players:count()+Player:id()
                  
            E:egp3DTracker(ID,Player:pos())
            
            E:egpText(Name,Player:name(),vec2(0,0))
            E:egpSize(Name,15)
            
            E:egpParent(Name,ID)
        }
    }
    
    timer("IO",0)
    #timer("reset",5000)
}

#####START Manage wire inputs#####
if (ScanPos){
    holoPos(1,ScanPos)
}
else{
    holoPos(1,entity():toWorld(vec(0,0,10)))
}
if (clk("IO")){
    if (HoloOutput){
        holoPos(0,HoloOutput)
    }
    else{
        holoPos(0,entity():toWorld(vec(0,0,100)))
    }
    
    if (ScanRange){
        Range = ScanRange
    }
    else{
        Range = 2000
    }
    if (HoloScale){
        Scale = HoloScale
    }
    else{
        Scale = 5
    }
    
    if (Reset){
        reset()
    }
    timer("IO",1000)
}
#####END Manage wire inputs#####

#[
findIncludeEntity(Ent)
findIncludeClass("player")
findIncludeClass("stargate")
findIncludeClass("teltak")
]#

findExcludeClass("gmod_*")
findExcludeClass("weapon_*")
findExcludeClass("shield_*")
findExcludeClass("energy_*")
findExcludeEntities(BlackList)
findInSphere(HoloScan:pos(),Range)

findSortByDistance(HoloScan:pos())

Entities = findToArray()

LastHolos = Holos
Holos = array()

X = 1
while (X < Entities:count() & perf(80)){
    Entity = Entities[X,entity]

    if (Entity:volume()>20000|Entity:isPlayer()){
        ID = Entity:id()+5#+5 (you can add 5 holo before it)

        Holos[Holos:count()+1,number] = ID
        LastHolos:remove(findInArray(LastHolos,ID))
        
        holoCreate(ID)
        holoModel(ID,Entity:model())
        holoMaterial(ID,Entity:getMaterial())
        holoScale(ID,vec(1,1,1)/Scale)
        
        LocalPos = HoloScan:toLocal(Entity:pos())/Scale
        LocalAng = HoloScan:toLocal(Entity:angles())
        
        WorldPos = HoloDest:toWorld(LocalPos)
        WorldAng = HoloDest:toWorld(LocalAng)
        
        holoAng(ID,WorldAng)
        holoPos(ID,WorldPos)
        
        if (Entity:isPlayer()){
            E:egpPos(EgpPlayers[Entity:name(),number],WorldPos)
        }
    }
    else{
        BlackList[BlackList:count()+1,entity] = Entity
    }
    X += 1
}

for (X=1, LastHolos:count()){
    holoDelete(LastHolos[X,number])
}



if (clk("reset")){
    reset()
}
